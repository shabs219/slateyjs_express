import type { AbstractType, YArrayEvent } from 'yjs';
import { HocuspocusProvider, HocuspocusProviderConfiguration } from './HocuspocusProvider.js';
import { TiptapCollabProviderWebsocket } from './TiptapCollabProviderWebsocket.js';
import type { THistoryVersion } from './types';
export type TiptapCollabProviderConfiguration = Required<Pick<HocuspocusProviderConfiguration, 'name'>> & Partial<HocuspocusProviderConfiguration> & (Required<Pick<AdditionalTiptapCollabProviderConfiguration, 'websocketProvider'>> | Required<Pick<AdditionalTiptapCollabProviderConfiguration, 'appId'>>);
export interface AdditionalTiptapCollabProviderConfiguration {
    /**
     * A Hocuspocus Cloud App ID, get one here: https://collab.tiptap.dev
     */
    appId?: string;
    websocketProvider?: TiptapCollabProviderWebsocket;
}
export declare class TiptapCollabProvider extends HocuspocusProvider {
    tiptapCollabConfigurationPrefix: string;
    constructor(configuration: TiptapCollabProviderConfiguration);
    /**
     * note: this will only work if your server loaded @hocuspocus-pro/extension-history, or if you are on a Tiptap business plan.
     */
    createVersion(name?: string): void;
    /**
     * note: this will only work if your server loaded @hocuspocus-pro/extension-history, or if you are on a Tiptap business plan.
     */
    revertToVersion(targetVersion: number): void;
    /**
     * note: this will only work if your server loaded @hocuspocus-pro/extension-history, or if you are on a Tiptap business plan.
     *
     * The server will reply with a stateless message (THistoryVersionPreviewEvent)
     */
    previewVersion(targetVersion: number): void;
    /**
     * note: this will only work if your server loaded @hocuspocus-pro/extension-history, or if you are on a Tiptap business plan.
     */
    getVersions(): THistoryVersion[];
    watchVersions(callback: Parameters<AbstractType<YArrayEvent<THistoryVersion>>['observe']>[0]): void;
    unwatchVersions(callback: Parameters<AbstractType<YArrayEvent<THistoryVersion>>['unobserve']>[0]): void;
    isAutoVersioning(): boolean;
    enableAutoVersioning(): 1;
    disableAutoVersioning(): 0;
}
